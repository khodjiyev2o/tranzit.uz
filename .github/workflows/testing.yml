name: Django CI

on:
  push:
    branches: [ "main" ]

jobs:
  testing:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9.13, ]
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Cache Dependencies
      uses: actions/cache@v2
      with:
        path: |
            /opt/hostedtoolcache/Python/3.9.13/x64/  # Change to match your Python version
            cache/pip
        key: ${{ runner.os }}-venv-${{ hashFiles('requirements/dev.txt') }}
        restore-keys: |
            ${{ runner.os }}-venv-

    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt

    - name: Run Tests
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DJANGO_SETTINGS_MODULE: 'config.settings.test'
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        TEST: 1
      run: |
        pytest  --nomigrations

  deploy:
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.IP_ADDRESS }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: .
          target: tranzit.uz
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.IP_ADDRESS }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd ~/tranzit.uz
            sudo docker system prune -a -f
            sudo docker-compose -f docker-compose.prod.yml down
            sudo docker-compose -f docker-compose.prod.yml up -d --build
      - name: Job Status
        run: echo "üçè Deployment status is ${{ job.status }}."